@{
	CODE.MesoBLL mesoBLL = new CODE.MesoBLL();
	CODE.MicroBLL microBLL = new CODE.MicroBLL();
	string mensagemErro;

	//GET ESTADOS
	List<SelectListItem> listaEstados = CODE.Uteis.RetornarEstadosComboCompleto();

	//GET MESOS
	var mesos = mesoBLL.getMesos(null, null, out mensagemErro);
	var listaMesos = new List<SelectListItem>();
	foreach (CODE.Meso meso in mesos) {
		listaMesos.Add(new SelectListItem() {
			Text = meso.Descricao,
			Value = meso.Codigo.ToString()
		});
	}

	//GET MESOS
	var micros = microBLL.getMicros(null, null, out mensagemErro);
	var listaMicros = new List<SelectListItem>();
	foreach (CODE.Micro micro in micros)
	{
		listaMicros.Add(new SelectListItem()
		{
			Text = micro.Descricao,
			Value = micro.Codigo.ToString()
		});
	}

	//GET INSTRUTORES
	List<CODE.Funcionario> agentesInstrutores = CODE.FuncionarioBLL.getFuncionarioByPerfil(10, out mensagemErro);
	List<SelectListItem> listaInstrutores = new List<SelectListItem>();
	foreach (CODE.Funcionario func in agentesInstrutores)
	{
		listaInstrutores.Add(new SelectListItem()
		{
			Text = func.Nome,
			Value = func.Codigo.ToString()
		});
	}

	//GET PRODUTOS
	CODE.ProdutoBLL produtoBLL = new CODE.ProdutoBLL();
	List<CODE.Produto.ProdutoTela> produtos = produtoBLL.GetProdutosTela(out mensagemErro, true);
	List<SelectListItem> listaProdutos = new List<SelectListItem>();
	foreach (CODE.Produto.ProdutoTela prod in produtos)
	{
		listaProdutos.Add(new SelectListItem()
		{
			Text = prod.Descricao,
			Value = prod.Codigo.ToString()
		});
	}
}
@Html.Partial("Roteirizacao/PartialDetalhesPedidoRota")
@Html.Partial("Roteirizacao/PartialConfirmarPedidoRota")

<section id="main-content">
	<section class="content">
		<!--PANEL 1-->
		<div class="panel">
			<header class="panel-heading">
				<h4 class="accordion-toggle" data-toggle="collapse" href="#divCollapsePanel1" aria-expanded="true">Cidades Disponíveis</h4>
			</header>
			<div id="divCollapsePanel1" class="panel-collapse collapse show">
				<div style="display: flex;">
					<!--CIDADES-->
					<div class="col-sm-6" style="height: 500px; padding: 10px; overflow: auto;">
						<!--FILTRO-->
						<div class="panel">
							<header class="panel-heading">
								<h4 class="accordion-toggle" data-toggle="collapse" href="#divCollapseFiltro" aria-expanded="true">Filtros</h4>
								<div class="top-nav">
									<button id="btnPesquisar" class="btn btn-primary" onclick="jsPesquisar();"><span aria-hidden="true" class="zmdi zmdi-search"></span> &nbsp; PESQUISAR</button>
								</div>
							</header>
							<div id="divCollapseFiltro" class="panel-collapse collapse show">
								<div class="panel-body">
									<div class="row">
										<div class="col-sm-12">
											<label>Estado</label>
											@Html.DropDownList("ddlEstadosFiltro", listaEstados, "Selecione o Estado...", new { @class = "select2", @onchange = "return preencheDDLCidades(this.value, $('#ddlCidadesFiltro'));" })
											<i class="form-group__bar"></i>
										</div>
										<div class="col-sm-12">
											<label>Cidade</label>
											@Html.DropDownList("ddlCidadesFiltro", new List<SelectListItem>(), "Todas as Cidades", new { @class = "select2" })
											<i class="form-group__bar"></i>
										</div>
										<div class="col-sm-12">
											<label>Meso</label>
											@Html.DropDownList("ddlMesoFiltro", listaMesos, "Selecione a Meso...", new { @class = "select2" })
											<i class="form-group__bar"></i>
										</div>
										<div class="col-sm-12">
											<label>Micro</label>
											@Html.DropDownList("ddlMicroFiltro", listaMicros, "Selecione a Micro...", new { @class = "select2" })
											<i class="form-group__bar"></i>
										</div>
										<div class="col-sm-12">
											<label>Produtos</label>
											@Html.DropDownList("ddlProdutosFiltro", listaProdutos, "Selecione o Produto...", new { @class = "select2" })
											<i class="form-group__bar"></i>
										</div>
									</div>
								</div>
							</div>
						</div>
						<!--RESULTADO-->
						<div id="divResult" class="panel" style="padding-top: 10px; display: none">
							<header class="panel-heading">
								<h4>Resultado</h4>
							</header>
							<div class="panel-body">
								<div class="table-responsive">
									<table id="tbCidades" class="table table-striped table-hover">
										<thead class="thead-default">
											<tr>
												<th>Cidade - UF</th>
												<th class="center">Qtde Pedidos</th>
												<th class="center">Valor Total</th>
												<th></th>
											</tr>
										</thead>
										<tbody id="tbCidades"></tbody>
									</table>
								</div>
							</div>
						</div>
					</div>
					<!--MAPA-->
					<div class="col-sm-6" style="height: 500px; padding: 8px;">
						<div id="map" style="height:485px;"></div>
						<button id="btnDistanceRoutes" class="btnDistanceRoutes" onclick="jsOpenCloseContentDistance()"><span class="zmdi zmdi-truck"></span></button>
						<button id="btnPoints" class="btnPoints" onclick="jsOpenClosePoints()"><span class="zmdi zmdi-city"></span></button>
						<div id="listDistances" class="listDistances" style="display: none;"></div>
						<div id="listPoints" class="listPoints" style="display: none;">
							<div class="row">
								<div class="col-sm-12">
									<label>Ponto Inicio</label>
									<input type="text" class="form-control"id="txtPointStart" />
									<i class="form-group__bar"></i>
								</div>
								<div class="form-group col-sm-12">
									<label>Ponto Final</label>
									<input type="text" class="form-control" id="txtPointEnd" />
									<i class="form-group__bar"></i>
								</div>
							</div>
						</div>
					</div>
				</div>
				
			</div>
		</div>
		<!--PANEL 2-->
		<div class="panel" style="padding-top: 10px;">
			<header class="panel-heading">
				<h4 class="accordion-toggle" data-toggle="collapse" href="#divCollapsePanel2" aria-expanded="true">Pedidos Selecionados</h4>
			</header>
			<div id="divCollapsePanel2" class="panel-collapse collapse show">
				<div class="panel-body">
					<div class="table-responsive">
						<table class="table table-striped table-hover">
							<thead class="thead-default">
								<tr>
									<th>Código Pedido</th>
									<th>Razão Social / Nome</th>
									<th>CNPJ / CPF</th>
									<th>Cidade - UF</th>
									<th>Data Inicio Treinamento</th>
									<th>Data Fim Treinamento</th>
									<th>Valor Total</th>
									<th class="th70px"></th>
								</tr>
							</thead>
							<tbody id="tbPedidos"></tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
		<!--PANEL 3-->
		<div class="panel" style="padding-top: 10px;">
			<header class="panel-heading">
				<h4 class="accordion-toggle" data-toggle="collapse" href="#divCollapsePanel3" aria-expanded="true">Detalhes Rota</h4>
				<div class="top-nav">
					<button id="btnLayoutRota" class="btn btn-primary" onclick="jsMontarLayoutRota();"><span aria-hidden="true" class="zmdi zmdi-truck"></span> &nbsp; MONTAR LAYOUT ROTA</button>
				</div>
			</header>
			<div id="divCollapsePanel3" class="panel-collapse collapse show">
				<div class="panel-body">
					<div class="row">
						<div class="form-group col-sm-6">
							<label>Instrutor</label>
							@Html.DropDownList("ddlInstrutorRota", listaInstrutores, "Selecione o Instrutor...", new { @class = "select2" })
							<i class="form-group__bar"></i>
						</div>
						<div class="form-group col-sm-3">
							<label>Data Inicio Rota</label>
							<input type="text" id="dtpDataInicioRota" class="form-control date-picker"	value="@Html.Raw(DateTime.Now.ToShortDateString())"/>
							<i class="form-group__bar"></i>
						</div>
						<div class="form-group col-sm-3">
							<label>Data Fim Rota</label>
							<input type="text" id="dtpDataFimRota" class="form-control date-picker" value="@Html.Raw(DateTime.Now.ToShortDateString())" />
							<i class="form-group__bar"></i>
						</div>
					</div>
					<div class="row">
						<table class="table tabele-striped table-hover table-bordered">
							<thead class="thead-default">
								<tr>
									<th width="70px"></th>
									<th width="50px"></th>
									<th>Tipo</th>
									<th>Cidade</th>
									<th>Razão Social</th>
									<th>Qtde</th>
									<th>Pedido(s)</th>
									<th>Serviços</th>
									<th>Local</th>
									<th>Vendedor</th>
									<th>Status</th>
									<th>Valor</th>
								</tr>
							</thead>
							<tbody id="tbLayoutRota"></tbody>
						</table>
					</div>
				</div>
			</div>
		</div>

	</section>
</section>

<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCu1NVvUi33FURh7lRtc91DacG7FtLrvk8&callback=initMap"></script>
<script type="text/javascript">

	var pontoInicio = "Uberlândia - MG, 38400-000";
	var pontoFinal = "Uberlândia - MG, 38400-000";

	$('#txtPointStart').val(pontoInicio);
	$('#txtPointEnd').val(pontoFinal);

	var map;
	var directionsService;
	var directionsDisplay;
	var waypts = [];
	var arrayCidades = [];
	var arrayCidadesSelecionadas = [];
	var arrayPedidos = [];
	var arrayLayoutRota = [];

	var distances = [];

	function initMap() {
		directionsService = new google.maps.DirectionsService;
		directionsDisplay = new google.maps.DirectionsRenderer;
		map = new google.maps.Map(document.getElementById('map'), {
			zoom: 6,
			center: { lat: -18.875427, lng: -48.235579 }
		});
		directionsDisplay.setMap(map);

		if (arrayCidades.length > 0) {
			calculateAndDisplayRoute(directionsService, directionsDisplay, arrayCidadesSelecionadas);
		}
	}

	function calculateAndDisplayRoute(directionsService, directionsDisplay, points) {

		waypts = [];

		for (var i = 0; i < points.length; i++) {
			waypts.push({
				location: points[i].cidade.descricao + " - " + points[i].cidade.estado,
				stopover: true
			});
		}

		directionsDisplay.setMap(map);

		directionsService.route({
			origin: pontoInicio,
			destination: pontoFinal,
			waypoints: waypts,
			optimizeWaypoints: true,
			travelMode: 'DRIVING'
		}, function (response, status) {
			if (status === 'OK') {
				directionsDisplay.setDirections(response);
				ordemCidadesRota = response.routes[0].waypoint_order;
				distances = response.routes[0].legs;
				jsMontaTabelaPedidos();
				jsMontaContentDistance();
			} else {
				window.alert('Não foi possível construir a rota. ' + status);
			}
		});
	}

	function jsPesquisar() {

		jsLoading(true);

		arrayCidades = [];
		arrayCidadesSelecionadas = [];

		var data = {
			estado: $('#ddlEstadosFiltro').val(),
			cidade: $('#ddlCidadesFiltro').val(),
			meso: $('#ddlMesoFiltro').val(),
			micro: $('#ddlMicroFiltro').val(),
			produto: $('#ddlProdutosFiltro').val()
		};

		$.ajax({
			type: "GET",
			url: "/Roteirizacao/BuscarCidadesRota/",
			data: data,
			success: function (result) {
				if (result.sucesso) {
					arrayCidades = result.listaCidades;
					if (arrayCidades.length > 0) {
						jsMontaTabelaCidades();
					} else {
						jsLoading(false);
						OpenAlert("Atenção!", "Não foi encontrado nenhum pedido para roteirizar!", "warning");
					}

				} else {
					jsLoading(false);
					OpenAlert("Atenção!", "Não foi encontrado nenhum pedido para roteirizar!", "warning");
				}
			}
		});

	}

	function jsMontaTabelaCidades() {
		var tbCidades = $('#tbCidades');

		tbCidades.empty();

		if (arrayCidades.length > 0) {

			for (var i = 0; i < arrayCidades.length; i++) {
				var ac = arrayCidades[i];

				var tr = document.createElement('tr');

				var td1 = document.createElement('td');
				td1.innerHTML = ac.cidade.descricao + " - " + ac.cidade.estado;
				tr.append(td1);

				var td2 = document.createElement('td');
				td2.innerHTML = ac.qtdePedidos;
				td2.style = 'text-align: center;'
				tr.append(td2);

				var td3 = document.createElement('td');
				td3.innerHTML = ac.valorTotalFormatado;
				td3.style = 'text-align: center;'
				tr.append(td3);

				var td4 = document.createElement('td');
				td4.innerHTML = "<a class='sun' onclick='jsSelecionarCidade("+i+", this)'><span class='zmdi zmdi-check'></span></a>";
				tr.append(td4);

				tbCidades.append(tr);
			}

			$('#divResult').show();
		} else {
			$('#divResult').hide();
		}

		jsLoading(false);

	}

	function jsSelecionarCidade(index, obj)
	{
		var cidade = arrayCidades[index];

		var indexOf = arrayCidadesSelecionadas.indexOf(cidade);

		if (indexOf > -1) {
			arrayCidadesSelecionadas.splice(indexOf, 1);
			$($(obj).children()).addClass('zmdi-check');
			$($(obj).children()).removeClass('zmdi-close');

		} else {
			arrayCidadesSelecionadas.push(cidade);
			$($(obj).children()).removeClass('zmdi-check');
			$($(obj).children()).addClass('zmdi-close');
		}

		calculateAndDisplayRoute(directionsService, directionsDisplay, arrayCidadesSelecionadas);
	}

	function jsMontaTabelaPedidos()
	{
		var tbPedidos = $('#tbPedidos');

		tbPedidos.empty();
		arrayPedidos = [];

		for (var i = 0; i < ordemCidadesRota.length; i++)
		{
			//IDENTIFICAR CIDADE
			var wp = waypts[ordemCidadesRota[i]];
			var cidade = null;

			for (var j = 0; j < arrayCidadesSelecionadas.length; j++)
			{
				if ((arrayCidadesSelecionadas[j].cidade.descricao + " - " + arrayCidadesSelecionadas[j].cidade.estado) === wp.location) {
					cidade = arrayCidadesSelecionadas[j];
					break;
				}
			}

			if (cidade != null) {
				for (var k = 0; k < cidade.listaPedidos.length; k++)
				{
					var ac = cidade.listaPedidos[k];
					arrayPedidos.push(ac);
				}
			}
		}

		jsMontaTabelaArrayPedidos();
	}

	function jsRemoverPedido(index) {

		arrayPedidos.splice(index, 1);

		jsMontaTabelaArrayPedidos();
	}

	function jsInfoPedido(codigoPedido) {
		openModalRoteirizacaoSimples(codigoPedido);
	}

	function jsConfirmarPedido(codigoPedido, indice) {

		//VALIDAR SE O LAYOUT FOI MONTADO
		var _dataInicio = $('#dtpDataInicioRota').val().split('/');
		var _dataFim = $('#dtpDataFimRota').val().split('/');

		var dataInicio = new Date(_dataInicio[1] + "/" + _dataInicio[0] + "/" + _dataInicio[2] + " 08:00");
		var dataFim = new Date(_dataFim[1] + "/" + _dataFim[0] + "/" + _dataFim[2] + " 18:00");

		if ($('#ddlInstrutorRota').val() == "")
		{ 
			jsAbrePartial('Atenção!', 'Selecione o instrutor antes de prosseguir!', 'danger');
			return false;
		}

		if (dataInicio == "" || dataFim == "" || arrayLayoutRota.length == 0) {
			jsAbrePartial('Atenção!', 'É necessário criar o layout da rota antes de prosseguir!', 'danger')
			return false;
		}

		var pedido = arrayPedidos[indice];

		//VALIDAR SE A DATA INFORMADA ESTÁ NO PERÍODO DA ROTA
		var _dataInicioTreinamento = $('#dtpDataInicioTreinamento_' + codigoPedido).val().split('/');
		var _dataFimTreinamento = $('#dtpDataFimTreinamento_' + codigoPedido).val().split('/');

		var dataInicioTreinamento = new Date(_dataInicioTreinamento[1] + "/" + _dataInicioTreinamento[0] + "/" + _dataInicioTreinamento[2]);
		var dataFimTreinamento = new Date(_dataFimTreinamento[1] + "/" + _dataFimTreinamento[0] + "/" + _dataFimTreinamento[2]);

		if (dataInicio > dataInicioTreinamento || dataFim < dataFimTreinamento) {
			jsAbrePartial('Atenção!', 'A data informada está fora do intervalo da rota!', 'danger')
			return false;
		}

		pedido.dataInicioTreinamento = dataInicioTreinamento;
		pedido.dataFimTreinamento = dataFimTreinamento;

		var setouInicio = false;

		for (var i = 0; i < arrayLayoutRota.length; i++)
		{
			var ac = arrayLayoutRota[i];
			var dataCurrent = ac.data.toLocaleDateString().split('/');

			//DIFERENTE DE DOMINGO
			if (ac.data.getDay() > 0)
			{
				if (!setouInicio) {
					//OLHAR DATA DE INICIO TREINAMENTO
					if (ac.periodo == "Manhã") {
						if (dataInicioTreinamento.getUTCDate() == dataCurrent[0] && dataInicioTreinamento <= new Date(dataCurrent[2], dataCurrent[1] - 1, dataCurrent[0], 13, 00, 00)) {
							ac.local = pedido.cliente.cidade.descricao + " - " + pedido.cliente.cidade.estado;
							ac.qtde = + 1;

							if (ac.razao != "") {
								ac.razao += "//" + pedido.cliente.razaoSocial
							} else {
								ac.razao = pedido.cliente.razaoSocial;
							}

							if (ac.codigoPedido != "") {
								ac.codigoPedido += "//" + pedido.codigo;
							} else {
								ac.codigoPedido = pedido.codigo;
							}

							ac.localAtendimento = 'No Posto';

							if (ac.vendedor != "") {
								ac.vendedor += "//" + pedido.funcionarioVendedor.nome;
							} else {
								ac.vendedor = pedido.funcionarioVendedor.nome;
							}

							ac.valor += pedido.valorTotal;
							setouInicio = true;

							ac.status = '<select class="select2 chk_' + pedido.codigo + '" onchange="jsConfirmarPedidoRota(this, ' + indice + ')">' +
								'<option value="S">confirmado</option>' +
								'<option value="N" selected>Não confirmado</option>' +
								'</select > ';
						}
					} else {
						if (dataInicioTreinamento.getUTCDate() == dataCurrent[0] && dataInicioTreinamento <= new Date(dataCurrent[2], dataCurrent[1] - 1, dataCurrent[0], 18, 00, 00)) {
							ac.local = pedido.cliente.cidade.descricao + " - " + pedido.cliente.cidade.estado;
							ac.qtde = + 1;

							if (ac.razao != "") {
								ac.razao += "//" + pedido.cliente.razaoSocial
							} else {
								ac.razao = pedido.cliente.razaoSocial;
							}

							if (ac.codigoPedido != "") {
								ac.codigoPedido += "//" + pedido.codigo;
							} else {
								ac.codigoPedido = pedido.codigo;
							}

							ac.localAtendimento = 'No Posto';

							if (ac.vendedor != "") {
								ac.vendedor += "//" + pedido.funcionarioVendedor.nome;
							} else {
								ac.vendedor = pedido.funcionarioVendedor.nome;
							}

							ac.valor += pedido.valorTotal;
							setouInicio = true;

							ac.status = '<select class="select2 chk_' + pedido.codigo + '" onchange="jsConfirmarPedidoRota(this, ' + indice + ')">' +
								'<option value="S">confirmado</option>' +
								'<option value="N" selected>Não confirmado</option>' +
								'</select > ';
						}
					}
				} else {
					//OLHAR DATA DE FIM TREINAMENTO
					if (ac.periodo == "Manhã") {
						if (dataFimTreinamento >= new Date(dataCurrent[2], dataCurrent[1] - 1, dataCurrent[0], 08, 00, 00)) {
							ac.local = pedido.cliente.cidade.descricao + " - " + pedido.cliente.cidade.estado;
							ac.qtde = + 1;

							if (ac.razao != "") {
								ac.razao += "//" + pedido.cliente.razaoSocial
							} else {
								ac.razao = pedido.cliente.razaoSocial;
							}

							if (ac.codigoPedido != "") {
								ac.codigoPedido += "//" + pedido.codigo;
							} else {
								ac.codigoPedido = pedido.codigo;
							}

							ac.localAtendimento = 'No Posto';

							if (ac.vendedor != "") {
								ac.vendedor += "//" + pedido.funcionarioVendedor.nome;
							} else {
								ac.vendedor = pedido.funcionarioVendedor.nome;
							}

							ac.valor += pedido.valorTotal;

							ac.status = '<select class="select2 chk_' + pedido.codigo + '" onchange="jsConfirmarPedidoRota(this, ' + indice + ')">' +
								'<option value="S">confirmado</option>' +
								'<option value="N" selected>Não confirmado</option>' +
								'</select > ';
						}
					} else {
						if (dataFimTreinamento >= new Date(dataCurrent[2], dataCurrent[1] - 1, dataCurrent[0], 13, 00, 00)) {
							ac.local = pedido.cliente.cidade.descricao + " - " + pedido.cliente.cidade.estado;
							ac.qtde = + 1;

							if (ac.razao != "") {
								ac.razao += "//" + pedido.cliente.razaoSocial
							} else {
								ac.razao = pedido.cliente.razaoSocial;
							}

							if (ac.codigoPedido != "") {
								ac.codigoPedido += "//" + pedido.codigo;
							} else {
								ac.codigoPedido = pedido.codigo;
							}

							ac.localAtendimento = 'No Posto';

							if (ac.vendedor != "") {
								ac.vendedor += "//" + pedido.funcionarioVendedor.nome;
							} else {
								ac.vendedor = pedido.funcionarioVendedor.nome;
							}

							ac.valor += pedido.valorTotal;

							ac.status = '<select class="select2 chk_' + pedido.codigo + '" onchange="jsConfirmarPedidoRota(this, ' + indice + ')">' +
								'<option value="S">confirmado</option>' +
								'<option value="N" selected>Não confirmado</option>' +
								'</select > ';
						}
					}
				}
				
				
			}
		}

		jsAtualizaLayoutRota();

		return true;
	}

	function jsMontaTabelaArrayPedidos() {

		var tbPedidos = $('#tbPedidos');

		tbPedidos.empty();

		for (var i = 0; i < arrayPedidos.length; i++)
		{
			var ac = arrayPedidos[i];

			var tr = document.createElement('tr');

			var td1 = document.createElement('td');
			td1.innerHTML = ac.codigo;
			tr.append(td1);

			var td2 = document.createElement('td');
			td2.innerHTML = ac.cliente.razaoSocial;
			tr.append(td2);

			var td3 = document.createElement('td');
			td3.innerHTML = ac.cliente.cnpj;
			tr.append(td3);

			var td4 = document.createElement('td');
			td4.innerHTML = ac.cliente.cidade.descricao + " - " + ac.cliente.cidade.estado;
			tr.append(td4);

			var td4 = document.createElement('td');
			if (ac.dataInicioTreinamento == "0001-01-01T00:00:00") {
				td4.innerHTML = '<input type="text" id="dtpDataInicioTreinamento_' + ac.codigo + '" class="form-control date-picker" value="' + moment(new Date()).format("DD/MM/YYYY hh:mm") + '" />';
			} else {
				td4.innerHTML = '<input type="text" id="dtpDataInicioTreinamento_' + ac.codigo + '" class="form-control date-picker" value="' + moment(new Date(ac.dataInicioTreinamento)).format("DD/MM/YYYY hh:mm") + '" />';
			}
			tr.append(td4);

			var td5 = document.createElement('td');
			if (ac.dataFinalTreinamento == "0001-01-01T00:00:00") {
				td5.innerHTML = '<input type="text" id="dtpDataFimTreinamento_' + ac.codigo + '" class="form-control date-picker" value="' + moment(new Date()).format("DD/MM/YYYY hh:mm") + '" />';
			} else {
				td5.innerHTML = '<input type="text" id="dtpDataFimTreinamento_' + ac.codigo + '" class="form-control date-picker" value="' + moment(new Date(ac.dataFinalTreinamento)).format("DD/MM/YYYY hh:mm") + '" />';
			}
			tr.append(td5);

			var td6 = document.createElement('td');
			td6.innerHTML = ac.valorTotalFormatado;
			tr.append(td6);

			var td7 = document.createElement('td');
			td7.innerHTML = "<a onclick='jsConfirmarPedido(" + ac.codigo + "," + i + ")'><span class='zmdi zmdi-check'></span></a> &nbsp; " +
				"<a onclick='jsInfoPedido(" + ac.codigo + ")'><span class='zmdi zmdi-info'></span></a> &nbsp; " +
				"<a onclick='jsRemoverPedido(" + i + ")'><span class='zmdi zmdi-delete'></span></a>  &nbsp; ";
			tr.append(td7);

			tbPedidos.append(tr);
		}

		$(".date-picker")[0] && $(".date-picker").flatpickr({
			enableTime: true,
			nextArrow: '<i class="zmdi zmdi-long-arrow-right" />',
			prevArrow: '<i class="zmdi zmdi-long-arrow-left" />'
		});
	}

	function jsMontarLayoutRota() {

		arrayLayoutRota = [];

		var _dataInicio = $('#dtpDataInicioRota').val().split('/');
		var _dataFim = $('#dtpDataFimRota').val().split('/');

		var dataInicio = new Date(_dataInicio[1] + "/" + _dataInicio[0] + "/" + _dataInicio[2]);
		var dataFim = new Date(_dataFim[1] + "/" + _dataFim[0] + "/" + _dataFim[2]);

		while (dataInicio <= dataFim) {

			var _dataCurrent = new Date(dataInicio.getTime());

			if (_dataCurrent.getDay() > 0) {
				var objManha = {
					codigoCliente: 0,
					data: _dataCurrent,
					periodo: "Manhã",
					tipo: 0,
					local: '',
					razao: '',
					qtde: 0,
					codigoPedido: '',
					servicos: '',
					localAtendimento: '',
					horarioAtendimento: '',
					km: '',
					vendedor: '',
					status: '',
					valor: 0
				}

				var objTarde = {
					codigoCliente: 0,
					data: _dataCurrent,
					periodo: "Tarde",
					tipo: 0,
					local: '',
					razao: '',
					qtde: 0,
					codigoPedido: '',
					servicos: '',
					localAtendimento: '',
					horarioAtendimento: '',
					km: '',
					vendedor: '',
					status: '',
					valor: 0
				}
			} else {
				var objManha = {
					codigoCliente: 0,
					data: _dataCurrent,
					periodo: "Manhã",
					tipo: 0,
					local: 'FOLGA',
					razao: 'FOLGA',
					qtde: 0,
					codigoPedido: 'FOLGA',
					servicos: 'FOLGA',
					localAtendimento: 'FOLGA',
					horarioAtendimento: 'FOLGA',
					km: '',
					vendedor: 'FOLGA',
					status: '',
					valor: 0
				}

				var objTarde = {
					codigoCliente: 0,
					data: _dataCurrent,
					periodo: "Tarde",
					tipo: 0,
					local: 'FOLGA',
					razao: 'FOLGA',
					qtde: 0,
					codigoPedido: 'FOLGA',
					servicos: 'FOLGA',
					localAtendimento: 'FOLGA',
					horarioAtendimento: 'FOLGA',
					km: '',
					vendedor: 'FOLGA',
					status: '',
					valor: 0
				}
			}

			arrayLayoutRota.push(objManha);
			arrayLayoutRota.push(objTarde);

			dataInicio.setDate(dataInicio.getDate() + 1);
		}

		jsAtualizaLayoutRota();

	}

	function jsAtualizaLayoutRota() {

		var tbLayoutRota = $('#tbLayoutRota');
		tbLayoutRota.empty();

		for (var i = 0; i < arrayLayoutRota.length; i++) {
			var ac = arrayLayoutRota[i];

			var tr = document.createElement('tr');
			tbLayoutRota.append(tr);

			var td1 = document.createElement('td');
			td1.innerHTML = ac.data.toLocaleDateString();
			tr.append(td1);

			var td2 = document.createElement('td');
			td2.innerHTML = ac.periodo;
			tr.append(td2);

			var td3 = document.createElement('td');
			td3.innerHTML = '';
			tr.append(td3);

			var td4 = document.createElement('td');
			td4.innerHTML = ac.local;
			tr.append(td4);

			var td5 = document.createElement('td');
			td5.innerHTML = ac.razao;
			tr.append(td5);

			var td6 = document.createElement('td');
			td6.innerHTML = ac.qtde;
			tr.append(td6);

			var td7 = document.createElement('td');
			td7.innerHTML = ac.codigoPedido;
			tr.append(td7);

			var td8 = document.createElement('td');
			td8.innerHTML = '';
			tr.append(td8);

			var td9 = document.createElement('td');
			td9.innerHTML = ac.localAtendimento;
			tr.append(td9);

			var td10 = document.createElement('td');
			td10.innerHTML = ac.vendedor;
			tr.append(td10);

			var td11 = document.createElement('td');
			td11.innerHTML = ac.status;
			tr.append(td11);

			var td12 = document.createElement('td');
			td12.innerHTML = ac.valor;
			tr.append(td12);
		}
	}

	function jsMontaContentDistance()
	{
		var listDistances = $('#listDistances');
		listDistances.empty();

		var content = "<ul class=\"list-group list-group-flush\">";

		for (var i = 0; i < distances.length; i++)
		{
			content += "<li class=\"list-group-item\">" + distances[i].start_address + " <> " + distances[i].end_address + " <> <strong>" + distances[i].distance.text + "</strong></li>";
		 }

		content += "</ul>";

		listDistances.append(content);
	}

	function jsOpenCloseContentDistance()
	{
		var listDistances = $('#listDistances');

		if ($('#listDistances').is(':visible')) {
			$('#listDistances').hide();
		} else {
			$('#listDistances').show();
		}
	}

	function jsOpenClosePoints()
	{
		if ($('#listPoints').is(':visible')) {
			$('#listPoints').hide();

			if (pontoInicio != $('#txtPointStart').val() || pontoFinal != $('#txtPointEnd').val())
			{
				pontoInicio = $('#txtPointStart').val();
				pontoFinal = $('#txtPointEnd').val();

				calculateAndDisplayRoute(directionsService, directionsDisplay, arrayCidadesSelecionadas);
			}

		} else {
			$('#listPoints').show();
		}
	}

	function jsConfirmarPedidoRota(obj, indice)
	{ 
		var pedido = arrayPedidos[indice];

		if ($(obj).val() == "S") {
			openModalConfirmarPedidoRota(pedido.cliente.codigo, pedido.codigo, pedido.cliente.cidade.codigo, $('#ddlInstrutorRota').val(), pedido.dataInicioTreinamento, pedido.dataFimTreinamento);
			$('.chk_' + pedido.codigo).each(function () {
				$(this).val('N');
			});
		}

		//console.log($(obj).val());
		//console.log(arrayPedidos[indice]);
	}

</script>