@using Newtonsoft.Json;
@model List<CODE.CabecalhoPedido>

@{
	string mensagemErro;

	//GET INSTRUTORES
	List<CODE.Funcionario> agentesInstrutores = CODE.FuncionarioBLL.getFuncionarioByPerfil(10, out mensagemErro);
	List<SelectListItem> listaInstrutores = new List<SelectListItem>();
	foreach (CODE.Funcionario func in agentesInstrutores)
	{
		listaInstrutores.Add(new SelectListItem()
		{
			Text = func.Nome,
			Value = func.Codigo.ToString()
		});
	}

}
@Html.Partial("Roteirizacao/PartialProdutosResumidoRoteirizacao")
<section id="main-content">
	<section class="content">
		@Html.Hidden("hfPedidos", JsonConvert.SerializeObject(Model))
		<div class="panel">
			<header class="panel-heading">
				<h4 class="accordion-toggle" data-toggle="collapse" href="#divCollapseMapa" aria-expanded="true">Mapa de Roteirização</h4>
				<div class="top-nav">
					<button id="btnSalvar" class="btn btn-primary" onclick="jsGravarRota();"><span aria-hidden="true" class="zmdi zmdi-floppy"></span> &nbsp; SALVAR</button>
				</div>
			</header>
			<div id="divCollapseMapa" class="panel-collapse collapse show">
				<div class="panel-body">
					<!--MAPA-->
					<div id="map" style="min-height:400px;"></div>
				</div>
			</div>
		</div>
		<br />	
		<div class="panel">
			<header class="panel-heading">
				<h4 class="accordion-toggle" data-toggle="collapse" href="#divCollapseDados" aria-expanded="true">Dados para Roteirização</h4>
				<div class="top-nav">
					<button id="btnRecarregarOrdemPedidos" class="btn btn-primary" onclick="jsMontarTabelaPedidosRota();"><span aria-hidden="true" class="zmdi zmdi-floppy"></span> &nbsp; ATUALIZAR GRID</button>
				</div>
			</header>
			<div id="divCollapseDados" class="panel-collapse collapse show">
				<div class="panel-body">
					<div class="row">
						<!--INFO ROTA-->
						<div class="form-group col-sm-6">
							<label>Instrutor</label>
							@Html.DropDownList("ddlInstrutorRota", listaInstrutores, "Selecione o Instrutor...", new { @class = "select2" })
							<i class="form-group__bar"></i>
						</div>
					</div>
					<div class="row">
						<div class="table-responsive">
							<table name="tbPedidos" class="table table-striped table-bordered table-hover"></table>
						</div>
					</div>
				</div>
			</div>
		</div>
	</section>
</section>
<!-- Maps API Javascript -->
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCu1NVvUi33FURh7lRtc91DacG7FtLrvk8&callback=initMap"></script>
<script type="text/javascript">

	var ordemCidadesRota = [];
	var arrayPedidosAprovados = [];
	var waypts = [];

	$(document).ready(function () {

		setTimeout(jsMontarTabelaPedidosRota(ordemCidadesRota), 2000);
		
	});

	function initMap() {
		var directionsService = new google.maps.DirectionsService;
		var directionsDisplay = new google.maps.DirectionsRenderer;
		var map = new google.maps.Map(document.getElementById('map'), {
			zoom: 6,
			center: { lat: -18.875427, lng: -48.235579 }
		});
		directionsDisplay.setMap(map);

		calculateAndDisplayRoute(directionsService, directionsDisplay, jsGetMarkers());
	}

	function calculateAndDisplayRoute(directionsService, directionsDisplay, points) {

		for (var i = 0; i < points.length; i++) {
			waypts.push({
				location: points[i],
				stopover: true
			});
		}

		directionsService.route({
			origin: "Av. Palmeira Imperial, 225 - Bosque dos Buritis, Uberlândia - MG, 38406-025",
			destination: "Av. Palmeira Imperial, 225 - Bosque dos Buritis, Uberlândia - MG, 38406-025",
			waypoints: waypts,
			optimizeWaypoints: true,
			travelMode: 'DRIVING'
		}, function (response, status) {
			if (status === 'OK') {
				directionsDisplay.setDirections(response);
				ordemCidadesRota = response.routes[0].waypoint_order;
			} else {
				window.alert('Não foi possível construir a rota. ' + status);
			}
		});
	}

	function jsGetMarkers() { 

		var pedidos = JSON.parse($('#hfPedidos').val());
		var markers = [];

		for (var i = 0; i < pedidos.length; i++)
		{
			//markers.push(pedidos[i].Cliente.Endereco + " - " + pedidos[i].Cliente.Bairro + ", " + pedidos[i].Cliente.Cidade.Descricao + " - " + pedidos[i].Cliente.Cidade.Estado);
			var location = pedidos[i].Cliente.Cidade.Descricao + "-" + pedidos[i].Cliente.Cidade.Estado;

			if (markers.indexOf(location) == -1)
			{
				markers.push(location);
			 }
		}
		
		return markers;

	}

	function jsMontarTabelaPedidosRota() { 

		if (ordemCidadesRota.length <= 0) { 
			return;
		}

		var itensPedido = JSON.parse($('#hfPedidos').val());

		var tabelaObjeto = document.getElementsByName('tbPedidos')[0];
		removeAllChilds(tabelaObjeto);

		if (tabelaObjeto.tHead == null) {
			var listaColunas = ["","Razão Social / Nome", "CNPJ / CPF", "Cidade-UF", "Data Inicio Treinamento", "Data Fim Treinamento",""];
			jsAdicionarCabecalhoTabela(tabelaObjeto, listaColunas);
		}

		var tbody = jsAdicionarCorpoTabela(tabelaObjeto);

		for (var j = 0; j < ordemCidadesRota.length; j++)
		{
			var dadosCorrente = waypts[ordemCidadesRota[j]].location.split("-");

			for (i = 0; i < itensPedido.length; i++) {

				if (dadosCorrente[0] == itensPedido[i].Cliente.Cidade.Descricao && dadosCorrente[1] == itensPedido[i].Cliente.Cidade.Estado)
				{ 
					var tr = document.createElement('tr');
					var td1 = document.createElement('td');
					var td2 = document.createElement('td');
					var td3 = document.createElement('td');
					var td4 = document.createElement('td');
					var td5 = document.createElement('td');
					var td6 = document.createElement('td');
					var td7 = document.createElement('td');

					td1.setAttribute('style', 'text-align:center');
					td7.setAttribute('style', 'text-align:center');

					td1.innerHTML = '<a class="zmdi zmdi-hc-2x zmdi-alert-circle-o" title="Visualizar Produtos" onclick="return jsAbrirProdutos(' + itensPedido[i].Codigo + ')"></a>';

					if (itensPedido[i].Cliente.TipoCliente == 1) {
						td2.innerHTML = itensPedido[i].Cliente.RazaoSocial;
						td3.innerHTML = itensPedido[i].Cliente.CNPJ;
					} else {
						td2.innerHTML = itensPedido[i].Cliente.Nome;
						td3.innerHTML = itensPedido[i].Cliente.CPF;
					}

					td4.innerHTML = itensPedido[i].Cliente.Cidade.Descricao + " - " + itensPedido[i].Cliente.Cidade.Estado;

					if (itensPedido[i].DataInicioTreinamento && itensPedido[i].DataInicioTreinamento != "0001-01-01T00:00:00") {

						td5.innerHTML = '<input type="text" id="dtpDataInicioTreinamento_' + itensPedido[i].Codigo + '" name="dtpDataInicioTreinamento_' + itensPedido[i].Codigo + '" class="form-control date-picker" value="' + moment(itensPedido[i].DataInicioTreinamento).format("DD/MM/YYYY") + '" />';
					} else {
						td5.innerHTML = '<input type="text" id="dtpDataInicioTreinamento_' + itensPedido[i].Codigo + '" name="dtpDataInicioTreinamento_' + itensPedido[i].Codigo + '" class="form-control date-picker" value="' + moment(new Date()).format("DD/MM/YYYY") + '" />';
					}

					if (itensPedido[i].DataFinalTreinamento && itensPedido[i].DataFinalTreinamento != "0001-01-01T00:00:00") {
						td6.innerHTML = '<input type="text" id="dtpDataFimTreinamento_' + itensPedido[i].Codigo + '" name="dtpDataFimTreinamento_' + itensPedido[i].Codigo + '" class="form-control date-picker" value="' + moment(itensPedido[i].DataFinalTreinamento).format("DD/MM/YYYY") + '" />';
					} else {
						td6.innerHTML = '<input type="text" id="dtpDataFimTreinamento_' + itensPedido[i].Codigo + '" name="dtpDataFimTreinamento_' + itensPedido[i].Codigo + '" class="form-control date-picker" value="' + moment(new Date()).format("DD/MM/YYYY") + '" />';
					}

					td7.innerHTML = '<a class="zmdi zmdi-hc-2x zmdi-assignment-alert check" data-id="' + itensPedido[i].Codigo + '"></a>';

					var listaColunas = [td1, td2, td3, td4, td5, td6, td7];

					jsAdicionarLinhaTabela(listaColunas, tr);

					tbody.appendChild(tr);
				}
			}
		}

		$(".date-picker")[0] && $(".date-picker").flatpickr({
			enableTime: !1,
			nextArrow: '<i class="zmdi zmdi-long-arrow-right" />',
			prevArrow: '<i class="zmdi zmdi-long-arrow-left" />'
		});

		$('.check').on("click", function (obj) {
			var objNovo = true;
			var idPedido = $(obj.target).data('id');

			var objAprovado = {
				codigoPedido: idPedido,
				dataInicioTreinamento: $("#dtpDataInicioTreinamento_" + idPedido + "").val(),
				dataFimTreinamento: $("#dtpDataFimTreinamento_" + idPedido + "").val()
			};

			for (var i = 0; i < arrayPedidosAprovados.length; i++) {
				if (arrayPedidosAprovados[i].codigoPedido == objAprovado.codigoPedido) {
					arrayPedidosAprovados.splice(i, 1);
					$(obj.target).removeClass("zmdi-assignment-check");
					$(obj.target).addClass("zmdi-assignment-alert");
					$("#dtpDataInicioTreinamento_" + idPedido + "").attr("disabled", false);
					$("#dtpDataFimTreinamento_" + idPedido + "").attr("disabled", false);
					objNovo = false;
					break;
				}
			}

			if (objNovo) {
				arrayPedidosAprovados.push(objAprovado);
				$(obj.target).removeClass("zmdi-assignment-alert");
				$(obj.target).addClass("zmdi-assignment-check");

				$("#dtpDataInicioTreinamento_" + idPedido + "").attr("disabled", true);
				$("#dtpDataFimTreinamento_" + idPedido + "").attr("disabled", true);
			}
		});
	}

	function jsAbrirProdutos(codigoPedido) { 
		openModalRoteirizacaoSimples(codigoPedido);
	}

	function jsGravarRota() {

		if ($('#ddlInstrutorRota').val() == "") {
			OpenAlert("Atenção!", "Informe o instrutor!", "danger");
			return false;
		} else if (arrayPedidosAprovados.length == 0) { 
			OpenAlert("Atenção!", "Nenhum pedido foi aprovado para a rota!", "danger");
			return false;
		}

		jsLoading(true);

		$.ajax({
			type: "POST",
			url: "/Roteirizacao/AtualizarRotaCompleta/",
			data: {
				codigoInstrutor: $('#ddlInstrutorRota').val(),
				arrayPedidosRota: JSON.stringify(arrayPedidosAprovados)
			},
			success: function (data) {
				if (data.sucesso) {
					window.location.assign("@Url.Action("List","Roteirizacao")");
				} else {
					OpenAlert("Atenção!", data.mensagemErro, "danger");
				}
			}
		});

	}

</script>